// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"reggie/internal/dal/model"
)

func newDish(db *gorm.DB, opts ...gen.DOOption) dish {
	_dish := dish{}

	_dish.dishDo.UseDB(db, opts...)
	_dish.dishDo.UseModel(&model.Dish{})

	tableName := _dish.dishDo.TableName()
	_dish.ALL = field.NewAsterisk(tableName)
	_dish.ID = field.NewInt64(tableName, "id")
	_dish.Name = field.NewString(tableName, "name")
	_dish.CategoryID = field.NewInt64(tableName, "category_id")
	_dish.Price = field.NewFloat64(tableName, "price")
	_dish.Image = field.NewString(tableName, "image")
	_dish.Description = field.NewString(tableName, "description")
	_dish.Status = field.NewInt32(tableName, "status")
	_dish.CreateTime = field.NewTime(tableName, "create_time")
	_dish.UpdateTime = field.NewTime(tableName, "update_time")
	_dish.CreateUser = field.NewInt64(tableName, "create_user")
	_dish.UpdateUser = field.NewInt64(tableName, "update_user")

	_dish.fillFieldMap()

	return _dish
}

// dish 菜品
type dish struct {
	dishDo dishDo

	ALL         field.Asterisk
	ID          field.Int64   // 主键
	Name        field.String  // 菜品名称
	CategoryID  field.Int64   // 菜品分类id
	Price       field.Float64 // 菜品价格
	Image       field.String  // 图片
	Description field.String  // 描述信息
	Status      field.Int32   // 0 停售 1 起售
	CreateTime  field.Time    // 创建时间
	UpdateTime  field.Time    // 更新时间
	CreateUser  field.Int64   // 创建人
	UpdateUser  field.Int64   // 修改人

	fieldMap map[string]field.Expr
}

func (d dish) Table(newTableName string) *dish {
	d.dishDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d dish) As(alias string) *dish {
	d.dishDo.DO = *(d.dishDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *dish) updateTableName(table string) *dish {
	d.ALL = field.NewAsterisk(table)
	d.ID = field.NewInt64(table, "id")
	d.Name = field.NewString(table, "name")
	d.CategoryID = field.NewInt64(table, "category_id")
	d.Price = field.NewFloat64(table, "price")
	d.Image = field.NewString(table, "image")
	d.Description = field.NewString(table, "description")
	d.Status = field.NewInt32(table, "status")
	d.CreateTime = field.NewTime(table, "create_time")
	d.UpdateTime = field.NewTime(table, "update_time")
	d.CreateUser = field.NewInt64(table, "create_user")
	d.UpdateUser = field.NewInt64(table, "update_user")

	d.fillFieldMap()

	return d
}

func (d *dish) WithContext(ctx context.Context) *dishDo { return d.dishDo.WithContext(ctx) }

func (d dish) TableName() string { return d.dishDo.TableName() }

func (d dish) Alias() string { return d.dishDo.Alias() }

func (d dish) Columns(cols ...field.Expr) gen.Columns { return d.dishDo.Columns(cols...) }

func (d *dish) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *dish) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 11)
	d.fieldMap["id"] = d.ID
	d.fieldMap["name"] = d.Name
	d.fieldMap["category_id"] = d.CategoryID
	d.fieldMap["price"] = d.Price
	d.fieldMap["image"] = d.Image
	d.fieldMap["description"] = d.Description
	d.fieldMap["status"] = d.Status
	d.fieldMap["create_time"] = d.CreateTime
	d.fieldMap["update_time"] = d.UpdateTime
	d.fieldMap["create_user"] = d.CreateUser
	d.fieldMap["update_user"] = d.UpdateUser
}

func (d dish) clone(db *gorm.DB) dish {
	d.dishDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d dish) replaceDB(db *gorm.DB) dish {
	d.dishDo.ReplaceDB(db)
	return d
}

type dishDo struct{ gen.DO }

func (d dishDo) Debug() *dishDo {
	return d.withDO(d.DO.Debug())
}

func (d dishDo) WithContext(ctx context.Context) *dishDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d dishDo) ReadDB() *dishDo {
	return d.Clauses(dbresolver.Read)
}

func (d dishDo) WriteDB() *dishDo {
	return d.Clauses(dbresolver.Write)
}

func (d dishDo) Session(config *gorm.Session) *dishDo {
	return d.withDO(d.DO.Session(config))
}

func (d dishDo) Clauses(conds ...clause.Expression) *dishDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d dishDo) Returning(value interface{}, columns ...string) *dishDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d dishDo) Not(conds ...gen.Condition) *dishDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d dishDo) Or(conds ...gen.Condition) *dishDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d dishDo) Select(conds ...field.Expr) *dishDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d dishDo) Where(conds ...gen.Condition) *dishDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d dishDo) Order(conds ...field.Expr) *dishDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d dishDo) Distinct(cols ...field.Expr) *dishDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d dishDo) Omit(cols ...field.Expr) *dishDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d dishDo) Join(table schema.Tabler, on ...field.Expr) *dishDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d dishDo) LeftJoin(table schema.Tabler, on ...field.Expr) *dishDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d dishDo) RightJoin(table schema.Tabler, on ...field.Expr) *dishDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d dishDo) Group(cols ...field.Expr) *dishDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d dishDo) Having(conds ...gen.Condition) *dishDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d dishDo) Limit(limit int) *dishDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d dishDo) Offset(offset int) *dishDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d dishDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *dishDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d dishDo) Unscoped() *dishDo {
	return d.withDO(d.DO.Unscoped())
}

func (d dishDo) Create(values ...*model.Dish) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d dishDo) CreateInBatches(values []*model.Dish, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d dishDo) Save(values ...*model.Dish) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d dishDo) First() (*model.Dish, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Dish), nil
	}
}

func (d dishDo) Take() (*model.Dish, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Dish), nil
	}
}

func (d dishDo) Last() (*model.Dish, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Dish), nil
	}
}

func (d dishDo) Find() ([]*model.Dish, error) {
	result, err := d.DO.Find()
	return result.([]*model.Dish), err
}

func (d dishDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Dish, err error) {
	buf := make([]*model.Dish, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d dishDo) FindInBatches(result *[]*model.Dish, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d dishDo) Attrs(attrs ...field.AssignExpr) *dishDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d dishDo) Assign(attrs ...field.AssignExpr) *dishDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d dishDo) Joins(fields ...field.RelationField) *dishDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d dishDo) Preload(fields ...field.RelationField) *dishDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d dishDo) FirstOrInit() (*model.Dish, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Dish), nil
	}
}

func (d dishDo) FirstOrCreate() (*model.Dish, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Dish), nil
	}
}

func (d dishDo) FindByPage(offset int, limit int) (result []*model.Dish, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d dishDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d dishDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d dishDo) Delete(models ...*model.Dish) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *dishDo) withDO(do gen.Dao) *dishDo {
	d.DO = *do.(*gen.DO)
	return d
}
