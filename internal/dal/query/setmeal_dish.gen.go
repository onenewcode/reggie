// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"reggie/internal/dal/model"
)

func newSetmealDish(db *gorm.DB, opts ...gen.DOOption) setmealDish {
	_setmealDish := setmealDish{}

	_setmealDish.setmealDishDo.UseDB(db, opts...)
	_setmealDish.setmealDishDo.UseModel(&model.SetmealDish{})

	tableName := _setmealDish.setmealDishDo.TableName()
	_setmealDish.ALL = field.NewAsterisk(tableName)
	_setmealDish.ID = field.NewInt64(tableName, "id")
	_setmealDish.SetmealID = field.NewInt64(tableName, "setmeal_id")
	_setmealDish.DishID = field.NewInt64(tableName, "dish_id")
	_setmealDish.Name = field.NewString(tableName, "name")
	_setmealDish.Price = field.NewFloat64(tableName, "price")
	_setmealDish.Copies = field.NewInt32(tableName, "copies")

	_setmealDish.fillFieldMap()

	return _setmealDish
}

// setmealDish 套餐菜品关系
type setmealDish struct {
	setmealDishDo setmealDishDo

	ALL       field.Asterisk
	ID        field.Int64   // 主键
	SetmealID field.Int64   // 套餐id
	DishID    field.Int64   // 菜品id
	Name      field.String  // 菜品名称 （冗余字段）
	Price     field.Float64 // 菜品单价（冗余字段）
	Copies    field.Int32   // 菜品份数

	fieldMap map[string]field.Expr
}

func (s setmealDish) Table(newTableName string) *setmealDish {
	s.setmealDishDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s setmealDish) As(alias string) *setmealDish {
	s.setmealDishDo.DO = *(s.setmealDishDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *setmealDish) updateTableName(table string) *setmealDish {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.SetmealID = field.NewInt64(table, "setmeal_id")
	s.DishID = field.NewInt64(table, "dish_id")
	s.Name = field.NewString(table, "name")
	s.Price = field.NewFloat64(table, "price")
	s.Copies = field.NewInt32(table, "copies")

	s.fillFieldMap()

	return s
}

func (s *setmealDish) WithContext(ctx context.Context) *setmealDishDo {
	return s.setmealDishDo.WithContext(ctx)
}

func (s setmealDish) TableName() string { return s.setmealDishDo.TableName() }

func (s setmealDish) Alias() string { return s.setmealDishDo.Alias() }

func (s setmealDish) Columns(cols ...field.Expr) gen.Columns { return s.setmealDishDo.Columns(cols...) }

func (s *setmealDish) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *setmealDish) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 6)
	s.fieldMap["id"] = s.ID
	s.fieldMap["setmeal_id"] = s.SetmealID
	s.fieldMap["dish_id"] = s.DishID
	s.fieldMap["name"] = s.Name
	s.fieldMap["price"] = s.Price
	s.fieldMap["copies"] = s.Copies
}

func (s setmealDish) clone(db *gorm.DB) setmealDish {
	s.setmealDishDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s setmealDish) replaceDB(db *gorm.DB) setmealDish {
	s.setmealDishDo.ReplaceDB(db)
	return s
}

type setmealDishDo struct{ gen.DO }

func (s setmealDishDo) Debug() *setmealDishDo {
	return s.withDO(s.DO.Debug())
}

func (s setmealDishDo) WithContext(ctx context.Context) *setmealDishDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s setmealDishDo) ReadDB() *setmealDishDo {
	return s.Clauses(dbresolver.Read)
}

func (s setmealDishDo) WriteDB() *setmealDishDo {
	return s.Clauses(dbresolver.Write)
}

func (s setmealDishDo) Session(config *gorm.Session) *setmealDishDo {
	return s.withDO(s.DO.Session(config))
}

func (s setmealDishDo) Clauses(conds ...clause.Expression) *setmealDishDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s setmealDishDo) Returning(value interface{}, columns ...string) *setmealDishDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s setmealDishDo) Not(conds ...gen.Condition) *setmealDishDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s setmealDishDo) Or(conds ...gen.Condition) *setmealDishDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s setmealDishDo) Select(conds ...field.Expr) *setmealDishDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s setmealDishDo) Where(conds ...gen.Condition) *setmealDishDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s setmealDishDo) Order(conds ...field.Expr) *setmealDishDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s setmealDishDo) Distinct(cols ...field.Expr) *setmealDishDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s setmealDishDo) Omit(cols ...field.Expr) *setmealDishDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s setmealDishDo) Join(table schema.Tabler, on ...field.Expr) *setmealDishDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s setmealDishDo) LeftJoin(table schema.Tabler, on ...field.Expr) *setmealDishDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s setmealDishDo) RightJoin(table schema.Tabler, on ...field.Expr) *setmealDishDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s setmealDishDo) Group(cols ...field.Expr) *setmealDishDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s setmealDishDo) Having(conds ...gen.Condition) *setmealDishDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s setmealDishDo) Limit(limit int) *setmealDishDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s setmealDishDo) Offset(offset int) *setmealDishDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s setmealDishDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *setmealDishDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s setmealDishDo) Unscoped() *setmealDishDo {
	return s.withDO(s.DO.Unscoped())
}

func (s setmealDishDo) Create(values ...*model.SetmealDish) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s setmealDishDo) CreateInBatches(values []*model.SetmealDish, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s setmealDishDo) Save(values ...*model.SetmealDish) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s setmealDishDo) First() (*model.SetmealDish, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SetmealDish), nil
	}
}

func (s setmealDishDo) Take() (*model.SetmealDish, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SetmealDish), nil
	}
}

func (s setmealDishDo) Last() (*model.SetmealDish, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SetmealDish), nil
	}
}

func (s setmealDishDo) Find() ([]*model.SetmealDish, error) {
	result, err := s.DO.Find()
	return result.([]*model.SetmealDish), err
}

func (s setmealDishDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SetmealDish, err error) {
	buf := make([]*model.SetmealDish, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s setmealDishDo) FindInBatches(result *[]*model.SetmealDish, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s setmealDishDo) Attrs(attrs ...field.AssignExpr) *setmealDishDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s setmealDishDo) Assign(attrs ...field.AssignExpr) *setmealDishDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s setmealDishDo) Joins(fields ...field.RelationField) *setmealDishDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s setmealDishDo) Preload(fields ...field.RelationField) *setmealDishDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s setmealDishDo) FirstOrInit() (*model.SetmealDish, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SetmealDish), nil
	}
}

func (s setmealDishDo) FirstOrCreate() (*model.SetmealDish, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SetmealDish), nil
	}
}

func (s setmealDishDo) FindByPage(offset int, limit int) (result []*model.SetmealDish, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s setmealDishDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s setmealDishDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s setmealDishDo) Delete(models ...*model.SetmealDish) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *setmealDishDo) withDO(do gen.Dao) *setmealDishDo {
	s.DO = *do.(*gen.DO)
	return s
}
