// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"reggie/internal/dal/model"
)

func newAddressBook(db *gorm.DB, opts ...gen.DOOption) addressBook {
	_addressBook := addressBook{}

	_addressBook.addressBookDo.UseDB(db, opts...)
	_addressBook.addressBookDo.UseModel(&model.AddressBook{})

	tableName := _addressBook.addressBookDo.TableName()
	_addressBook.ALL = field.NewAsterisk(tableName)
	_addressBook.ID = field.NewInt64(tableName, "id")
	_addressBook.UserID = field.NewInt64(tableName, "user_id")
	_addressBook.Consignee = field.NewString(tableName, "consignee")
	_addressBook.Sex = field.NewString(tableName, "sex")
	_addressBook.Phone = field.NewString(tableName, "phone")
	_addressBook.ProvinceCode = field.NewString(tableName, "province_code")
	_addressBook.ProvinceName = field.NewString(tableName, "province_name")
	_addressBook.CityCode = field.NewString(tableName, "city_code")
	_addressBook.CityName = field.NewString(tableName, "city_name")
	_addressBook.DistrictCode = field.NewString(tableName, "district_code")
	_addressBook.DistrictName = field.NewString(tableName, "district_name")
	_addressBook.Detail = field.NewString(tableName, "detail")
	_addressBook.Label = field.NewString(tableName, "label")
	_addressBook.IsDefault = field.NewBool(tableName, "is_default")

	_addressBook.fillFieldMap()

	return _addressBook
}

// addressBook 地址簿
type addressBook struct {
	addressBookDo addressBookDo

	ALL          field.Asterisk
	ID           field.Int64  // 主键
	UserID       field.Int64  // 用户id
	Consignee    field.String // 收货人
	Sex          field.String // 性别
	Phone        field.String // 手机号
	ProvinceCode field.String // 省级区划编号
	ProvinceName field.String // 省级名称
	CityCode     field.String // 市级区划编号
	CityName     field.String // 市级名称
	DistrictCode field.String // 区级区划编号
	DistrictName field.String // 区级名称
	Detail       field.String // 详细地址
	Label        field.String // 标签
	IsDefault    field.Bool   // 默认 0 否 1是

	fieldMap map[string]field.Expr
}

func (a addressBook) Table(newTableName string) *addressBook {
	a.addressBookDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a addressBook) As(alias string) *addressBook {
	a.addressBookDo.DO = *(a.addressBookDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *addressBook) updateTableName(table string) *addressBook {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "id")
	a.UserID = field.NewInt64(table, "user_id")
	a.Consignee = field.NewString(table, "consignee")
	a.Sex = field.NewString(table, "sex")
	a.Phone = field.NewString(table, "phone")
	a.ProvinceCode = field.NewString(table, "province_code")
	a.ProvinceName = field.NewString(table, "province_name")
	a.CityCode = field.NewString(table, "city_code")
	a.CityName = field.NewString(table, "city_name")
	a.DistrictCode = field.NewString(table, "district_code")
	a.DistrictName = field.NewString(table, "district_name")
	a.Detail = field.NewString(table, "detail")
	a.Label = field.NewString(table, "label")
	a.IsDefault = field.NewBool(table, "is_default")

	a.fillFieldMap()

	return a
}

func (a *addressBook) WithContext(ctx context.Context) *addressBookDo {
	return a.addressBookDo.WithContext(ctx)
}

func (a addressBook) TableName() string { return a.addressBookDo.TableName() }

func (a addressBook) Alias() string { return a.addressBookDo.Alias() }

func (a addressBook) Columns(cols ...field.Expr) gen.Columns { return a.addressBookDo.Columns(cols...) }

func (a *addressBook) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *addressBook) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 14)
	a.fieldMap["id"] = a.ID
	a.fieldMap["user_id"] = a.UserID
	a.fieldMap["consignee"] = a.Consignee
	a.fieldMap["sex"] = a.Sex
	a.fieldMap["phone"] = a.Phone
	a.fieldMap["province_code"] = a.ProvinceCode
	a.fieldMap["province_name"] = a.ProvinceName
	a.fieldMap["city_code"] = a.CityCode
	a.fieldMap["city_name"] = a.CityName
	a.fieldMap["district_code"] = a.DistrictCode
	a.fieldMap["district_name"] = a.DistrictName
	a.fieldMap["detail"] = a.Detail
	a.fieldMap["label"] = a.Label
	a.fieldMap["is_default"] = a.IsDefault
}

func (a addressBook) clone(db *gorm.DB) addressBook {
	a.addressBookDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a addressBook) replaceDB(db *gorm.DB) addressBook {
	a.addressBookDo.ReplaceDB(db)
	return a
}

type addressBookDo struct{ gen.DO }

func (a addressBookDo) Debug() *addressBookDo {
	return a.withDO(a.DO.Debug())
}

func (a addressBookDo) WithContext(ctx context.Context) *addressBookDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a addressBookDo) ReadDB() *addressBookDo {
	return a.Clauses(dbresolver.Read)
}

func (a addressBookDo) WriteDB() *addressBookDo {
	return a.Clauses(dbresolver.Write)
}

func (a addressBookDo) Session(config *gorm.Session) *addressBookDo {
	return a.withDO(a.DO.Session(config))
}

func (a addressBookDo) Clauses(conds ...clause.Expression) *addressBookDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a addressBookDo) Returning(value interface{}, columns ...string) *addressBookDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a addressBookDo) Not(conds ...gen.Condition) *addressBookDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a addressBookDo) Or(conds ...gen.Condition) *addressBookDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a addressBookDo) Select(conds ...field.Expr) *addressBookDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a addressBookDo) Where(conds ...gen.Condition) *addressBookDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a addressBookDo) Order(conds ...field.Expr) *addressBookDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a addressBookDo) Distinct(cols ...field.Expr) *addressBookDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a addressBookDo) Omit(cols ...field.Expr) *addressBookDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a addressBookDo) Join(table schema.Tabler, on ...field.Expr) *addressBookDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a addressBookDo) LeftJoin(table schema.Tabler, on ...field.Expr) *addressBookDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a addressBookDo) RightJoin(table schema.Tabler, on ...field.Expr) *addressBookDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a addressBookDo) Group(cols ...field.Expr) *addressBookDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a addressBookDo) Having(conds ...gen.Condition) *addressBookDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a addressBookDo) Limit(limit int) *addressBookDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a addressBookDo) Offset(offset int) *addressBookDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a addressBookDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *addressBookDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a addressBookDo) Unscoped() *addressBookDo {
	return a.withDO(a.DO.Unscoped())
}

func (a addressBookDo) Create(values ...*model.AddressBook) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a addressBookDo) CreateInBatches(values []*model.AddressBook, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a addressBookDo) Save(values ...*model.AddressBook) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a addressBookDo) First() (*model.AddressBook, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AddressBook), nil
	}
}

func (a addressBookDo) Take() (*model.AddressBook, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AddressBook), nil
	}
}

func (a addressBookDo) Last() (*model.AddressBook, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AddressBook), nil
	}
}

func (a addressBookDo) Find() ([]*model.AddressBook, error) {
	result, err := a.DO.Find()
	return result.([]*model.AddressBook), err
}

func (a addressBookDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AddressBook, err error) {
	buf := make([]*model.AddressBook, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a addressBookDo) FindInBatches(result *[]*model.AddressBook, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a addressBookDo) Attrs(attrs ...field.AssignExpr) *addressBookDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a addressBookDo) Assign(attrs ...field.AssignExpr) *addressBookDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a addressBookDo) Joins(fields ...field.RelationField) *addressBookDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a addressBookDo) Preload(fields ...field.RelationField) *addressBookDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a addressBookDo) FirstOrInit() (*model.AddressBook, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AddressBook), nil
	}
}

func (a addressBookDo) FirstOrCreate() (*model.AddressBook, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AddressBook), nil
	}
}

func (a addressBookDo) FindByPage(offset int, limit int) (result []*model.AddressBook, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a addressBookDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a addressBookDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a addressBookDo) Delete(models ...*model.AddressBook) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *addressBookDo) withDO(do gen.Dao) *addressBookDo {
	a.DO = *do.(*gen.DO)
	return a
}
