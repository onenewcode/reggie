// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"reggie/internal/dal/model"
)

func newOrderDetail(db *gorm.DB, opts ...gen.DOOption) orderDetail {
	_orderDetail := orderDetail{}

	_orderDetail.orderDetailDo.UseDB(db, opts...)
	_orderDetail.orderDetailDo.UseModel(&model.OrderDetail{})

	tableName := _orderDetail.orderDetailDo.TableName()
	_orderDetail.ALL = field.NewAsterisk(tableName)
	_orderDetail.ID = field.NewInt64(tableName, "id")
	_orderDetail.Name = field.NewString(tableName, "name")
	_orderDetail.Image = field.NewString(tableName, "image")
	_orderDetail.OrderID = field.NewInt64(tableName, "order_id")
	_orderDetail.DishID = field.NewInt64(tableName, "dish_id")
	_orderDetail.SetmealID = field.NewInt64(tableName, "setmeal_id")
	_orderDetail.DishFlavor = field.NewString(tableName, "dish_flavor")
	_orderDetail.Number = field.NewInt32(tableName, "number")
	_orderDetail.Amount = field.NewFloat64(tableName, "amount")

	_orderDetail.fillFieldMap()

	return _orderDetail
}

// orderDetail 订单明细表
type orderDetail struct {
	orderDetailDo orderDetailDo

	ALL        field.Asterisk
	ID         field.Int64   // 主键
	Name       field.String  // 名字
	Image      field.String  // 图片
	OrderID    field.Int64   // 订单id
	DishID     field.Int64   // 菜品id
	SetmealID  field.Int64   // 套餐id
	DishFlavor field.String  // 口味
	Number     field.Int32   // 数量
	Amount     field.Float64 // 金额

	fieldMap map[string]field.Expr
}

func (o orderDetail) Table(newTableName string) *orderDetail {
	o.orderDetailDo.UseTable(newTableName)
	return o.updateTableName(newTableName)
}

func (o orderDetail) As(alias string) *orderDetail {
	o.orderDetailDo.DO = *(o.orderDetailDo.As(alias).(*gen.DO))
	return o.updateTableName(alias)
}

func (o *orderDetail) updateTableName(table string) *orderDetail {
	o.ALL = field.NewAsterisk(table)
	o.ID = field.NewInt64(table, "id")
	o.Name = field.NewString(table, "name")
	o.Image = field.NewString(table, "image")
	o.OrderID = field.NewInt64(table, "order_id")
	o.DishID = field.NewInt64(table, "dish_id")
	o.SetmealID = field.NewInt64(table, "setmeal_id")
	o.DishFlavor = field.NewString(table, "dish_flavor")
	o.Number = field.NewInt32(table, "number")
	o.Amount = field.NewFloat64(table, "amount")

	o.fillFieldMap()

	return o
}

func (o *orderDetail) WithContext(ctx context.Context) *orderDetailDo {
	return o.orderDetailDo.WithContext(ctx)
}

func (o orderDetail) TableName() string { return o.orderDetailDo.TableName() }

func (o orderDetail) Alias() string { return o.orderDetailDo.Alias() }

func (o orderDetail) Columns(cols ...field.Expr) gen.Columns { return o.orderDetailDo.Columns(cols...) }

func (o *orderDetail) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := o.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (o *orderDetail) fillFieldMap() {
	o.fieldMap = make(map[string]field.Expr, 9)
	o.fieldMap["id"] = o.ID
	o.fieldMap["name"] = o.Name
	o.fieldMap["image"] = o.Image
	o.fieldMap["order_id"] = o.OrderID
	o.fieldMap["dish_id"] = o.DishID
	o.fieldMap["setmeal_id"] = o.SetmealID
	o.fieldMap["dish_flavor"] = o.DishFlavor
	o.fieldMap["number"] = o.Number
	o.fieldMap["amount"] = o.Amount
}

func (o orderDetail) clone(db *gorm.DB) orderDetail {
	o.orderDetailDo.ReplaceConnPool(db.Statement.ConnPool)
	return o
}

func (o orderDetail) replaceDB(db *gorm.DB) orderDetail {
	o.orderDetailDo.ReplaceDB(db)
	return o
}

type orderDetailDo struct{ gen.DO }

func (o orderDetailDo) Debug() *orderDetailDo {
	return o.withDO(o.DO.Debug())
}

func (o orderDetailDo) WithContext(ctx context.Context) *orderDetailDo {
	return o.withDO(o.DO.WithContext(ctx))
}

func (o orderDetailDo) ReadDB() *orderDetailDo {
	return o.Clauses(dbresolver.Read)
}

func (o orderDetailDo) WriteDB() *orderDetailDo {
	return o.Clauses(dbresolver.Write)
}

func (o orderDetailDo) Session(config *gorm.Session) *orderDetailDo {
	return o.withDO(o.DO.Session(config))
}

func (o orderDetailDo) Clauses(conds ...clause.Expression) *orderDetailDo {
	return o.withDO(o.DO.Clauses(conds...))
}

func (o orderDetailDo) Returning(value interface{}, columns ...string) *orderDetailDo {
	return o.withDO(o.DO.Returning(value, columns...))
}

func (o orderDetailDo) Not(conds ...gen.Condition) *orderDetailDo {
	return o.withDO(o.DO.Not(conds...))
}

func (o orderDetailDo) Or(conds ...gen.Condition) *orderDetailDo {
	return o.withDO(o.DO.Or(conds...))
}

func (o orderDetailDo) Select(conds ...field.Expr) *orderDetailDo {
	return o.withDO(o.DO.Select(conds...))
}

func (o orderDetailDo) Where(conds ...gen.Condition) *orderDetailDo {
	return o.withDO(o.DO.Where(conds...))
}

func (o orderDetailDo) Order(conds ...field.Expr) *orderDetailDo {
	return o.withDO(o.DO.Order(conds...))
}

func (o orderDetailDo) Distinct(cols ...field.Expr) *orderDetailDo {
	return o.withDO(o.DO.Distinct(cols...))
}

func (o orderDetailDo) Omit(cols ...field.Expr) *orderDetailDo {
	return o.withDO(o.DO.Omit(cols...))
}

func (o orderDetailDo) Join(table schema.Tabler, on ...field.Expr) *orderDetailDo {
	return o.withDO(o.DO.Join(table, on...))
}

func (o orderDetailDo) LeftJoin(table schema.Tabler, on ...field.Expr) *orderDetailDo {
	return o.withDO(o.DO.LeftJoin(table, on...))
}

func (o orderDetailDo) RightJoin(table schema.Tabler, on ...field.Expr) *orderDetailDo {
	return o.withDO(o.DO.RightJoin(table, on...))
}

func (o orderDetailDo) Group(cols ...field.Expr) *orderDetailDo {
	return o.withDO(o.DO.Group(cols...))
}

func (o orderDetailDo) Having(conds ...gen.Condition) *orderDetailDo {
	return o.withDO(o.DO.Having(conds...))
}

func (o orderDetailDo) Limit(limit int) *orderDetailDo {
	return o.withDO(o.DO.Limit(limit))
}

func (o orderDetailDo) Offset(offset int) *orderDetailDo {
	return o.withDO(o.DO.Offset(offset))
}

func (o orderDetailDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *orderDetailDo {
	return o.withDO(o.DO.Scopes(funcs...))
}

func (o orderDetailDo) Unscoped() *orderDetailDo {
	return o.withDO(o.DO.Unscoped())
}

func (o orderDetailDo) Create(values ...*model.OrderDetail) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Create(values)
}

func (o orderDetailDo) CreateInBatches(values []*model.OrderDetail, batchSize int) error {
	return o.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (o orderDetailDo) Save(values ...*model.OrderDetail) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Save(values)
}

func (o orderDetailDo) First() (*model.OrderDetail, error) {
	if result, err := o.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.OrderDetail), nil
	}
}

func (o orderDetailDo) Take() (*model.OrderDetail, error) {
	if result, err := o.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.OrderDetail), nil
	}
}

func (o orderDetailDo) Last() (*model.OrderDetail, error) {
	if result, err := o.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.OrderDetail), nil
	}
}

func (o orderDetailDo) Find() ([]*model.OrderDetail, error) {
	result, err := o.DO.Find()
	return result.([]*model.OrderDetail), err
}

func (o orderDetailDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.OrderDetail, err error) {
	buf := make([]*model.OrderDetail, 0, batchSize)
	err = o.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (o orderDetailDo) FindInBatches(result *[]*model.OrderDetail, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return o.DO.FindInBatches(result, batchSize, fc)
}

func (o orderDetailDo) Attrs(attrs ...field.AssignExpr) *orderDetailDo {
	return o.withDO(o.DO.Attrs(attrs...))
}

func (o orderDetailDo) Assign(attrs ...field.AssignExpr) *orderDetailDo {
	return o.withDO(o.DO.Assign(attrs...))
}

func (o orderDetailDo) Joins(fields ...field.RelationField) *orderDetailDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Joins(_f))
	}
	return &o
}

func (o orderDetailDo) Preload(fields ...field.RelationField) *orderDetailDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Preload(_f))
	}
	return &o
}

func (o orderDetailDo) FirstOrInit() (*model.OrderDetail, error) {
	if result, err := o.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.OrderDetail), nil
	}
}

func (o orderDetailDo) FirstOrCreate() (*model.OrderDetail, error) {
	if result, err := o.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.OrderDetail), nil
	}
}

func (o orderDetailDo) FindByPage(offset int, limit int) (result []*model.OrderDetail, count int64, err error) {
	result, err = o.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = o.Offset(-1).Limit(-1).Count()
	return
}

func (o orderDetailDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = o.Count()
	if err != nil {
		return
	}

	err = o.Offset(offset).Limit(limit).Scan(result)
	return
}

func (o orderDetailDo) Scan(result interface{}) (err error) {
	return o.DO.Scan(result)
}

func (o orderDetailDo) Delete(models ...*model.OrderDetail) (result gen.ResultInfo, err error) {
	return o.DO.Delete(models)
}

func (o *orderDetailDo) withDO(do gen.Dao) *orderDetailDo {
	o.DO = *do.(*gen.DO)
	return o
}
