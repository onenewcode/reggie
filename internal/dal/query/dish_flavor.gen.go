// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"reggie/internal/dal/model"
)

func newDishFlavor(db *gorm.DB, opts ...gen.DOOption) dishFlavor {
	_dishFlavor := dishFlavor{}

	_dishFlavor.dishFlavorDo.UseDB(db, opts...)
	_dishFlavor.dishFlavorDo.UseModel(&model.DishFlavor{})

	tableName := _dishFlavor.dishFlavorDo.TableName()
	_dishFlavor.ALL = field.NewAsterisk(tableName)
	_dishFlavor.ID = field.NewInt64(tableName, "id")
	_dishFlavor.DishID = field.NewInt64(tableName, "dish_id")
	_dishFlavor.Name = field.NewString(tableName, "name")
	_dishFlavor.Value = field.NewString(tableName, "value")

	_dishFlavor.fillFieldMap()

	return _dishFlavor
}

// dishFlavor 菜品口味关系表
type dishFlavor struct {
	dishFlavorDo dishFlavorDo

	ALL    field.Asterisk
	ID     field.Int64  // 主键
	DishID field.Int64  // 菜品
	Name   field.String // 口味名称
	Value  field.String // 口味数据list

	fieldMap map[string]field.Expr
}

func (d dishFlavor) Table(newTableName string) *dishFlavor {
	d.dishFlavorDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d dishFlavor) As(alias string) *dishFlavor {
	d.dishFlavorDo.DO = *(d.dishFlavorDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *dishFlavor) updateTableName(table string) *dishFlavor {
	d.ALL = field.NewAsterisk(table)
	d.ID = field.NewInt64(table, "id")
	d.DishID = field.NewInt64(table, "dish_id")
	d.Name = field.NewString(table, "name")
	d.Value = field.NewString(table, "value")

	d.fillFieldMap()

	return d
}

func (d *dishFlavor) WithContext(ctx context.Context) *dishFlavorDo {
	return d.dishFlavorDo.WithContext(ctx)
}

func (d dishFlavor) TableName() string { return d.dishFlavorDo.TableName() }

func (d dishFlavor) Alias() string { return d.dishFlavorDo.Alias() }

func (d dishFlavor) Columns(cols ...field.Expr) gen.Columns { return d.dishFlavorDo.Columns(cols...) }

func (d *dishFlavor) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *dishFlavor) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 4)
	d.fieldMap["id"] = d.ID
	d.fieldMap["dish_id"] = d.DishID
	d.fieldMap["name"] = d.Name
	d.fieldMap["value"] = d.Value
}

func (d dishFlavor) clone(db *gorm.DB) dishFlavor {
	d.dishFlavorDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d dishFlavor) replaceDB(db *gorm.DB) dishFlavor {
	d.dishFlavorDo.ReplaceDB(db)
	return d
}

type dishFlavorDo struct{ gen.DO }

func (d dishFlavorDo) Debug() *dishFlavorDo {
	return d.withDO(d.DO.Debug())
}

func (d dishFlavorDo) WithContext(ctx context.Context) *dishFlavorDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d dishFlavorDo) ReadDB() *dishFlavorDo {
	return d.Clauses(dbresolver.Read)
}

func (d dishFlavorDo) WriteDB() *dishFlavorDo {
	return d.Clauses(dbresolver.Write)
}

func (d dishFlavorDo) Session(config *gorm.Session) *dishFlavorDo {
	return d.withDO(d.DO.Session(config))
}

func (d dishFlavorDo) Clauses(conds ...clause.Expression) *dishFlavorDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d dishFlavorDo) Returning(value interface{}, columns ...string) *dishFlavorDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d dishFlavorDo) Not(conds ...gen.Condition) *dishFlavorDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d dishFlavorDo) Or(conds ...gen.Condition) *dishFlavorDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d dishFlavorDo) Select(conds ...field.Expr) *dishFlavorDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d dishFlavorDo) Where(conds ...gen.Condition) *dishFlavorDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d dishFlavorDo) Order(conds ...field.Expr) *dishFlavorDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d dishFlavorDo) Distinct(cols ...field.Expr) *dishFlavorDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d dishFlavorDo) Omit(cols ...field.Expr) *dishFlavorDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d dishFlavorDo) Join(table schema.Tabler, on ...field.Expr) *dishFlavorDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d dishFlavorDo) LeftJoin(table schema.Tabler, on ...field.Expr) *dishFlavorDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d dishFlavorDo) RightJoin(table schema.Tabler, on ...field.Expr) *dishFlavorDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d dishFlavorDo) Group(cols ...field.Expr) *dishFlavorDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d dishFlavorDo) Having(conds ...gen.Condition) *dishFlavorDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d dishFlavorDo) Limit(limit int) *dishFlavorDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d dishFlavorDo) Offset(offset int) *dishFlavorDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d dishFlavorDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *dishFlavorDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d dishFlavorDo) Unscoped() *dishFlavorDo {
	return d.withDO(d.DO.Unscoped())
}

func (d dishFlavorDo) Create(values ...*model.DishFlavor) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d dishFlavorDo) CreateInBatches(values []*model.DishFlavor, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d dishFlavorDo) Save(values ...*model.DishFlavor) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d dishFlavorDo) First() (*model.DishFlavor, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.DishFlavor), nil
	}
}

func (d dishFlavorDo) Take() (*model.DishFlavor, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.DishFlavor), nil
	}
}

func (d dishFlavorDo) Last() (*model.DishFlavor, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.DishFlavor), nil
	}
}

func (d dishFlavorDo) Find() ([]*model.DishFlavor, error) {
	result, err := d.DO.Find()
	return result.([]*model.DishFlavor), err
}

func (d dishFlavorDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DishFlavor, err error) {
	buf := make([]*model.DishFlavor, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d dishFlavorDo) FindInBatches(result *[]*model.DishFlavor, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d dishFlavorDo) Attrs(attrs ...field.AssignExpr) *dishFlavorDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d dishFlavorDo) Assign(attrs ...field.AssignExpr) *dishFlavorDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d dishFlavorDo) Joins(fields ...field.RelationField) *dishFlavorDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d dishFlavorDo) Preload(fields ...field.RelationField) *dishFlavorDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d dishFlavorDo) FirstOrInit() (*model.DishFlavor, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.DishFlavor), nil
	}
}

func (d dishFlavorDo) FirstOrCreate() (*model.DishFlavor, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.DishFlavor), nil
	}
}

func (d dishFlavorDo) FindByPage(offset int, limit int) (result []*model.DishFlavor, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d dishFlavorDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d dishFlavorDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d dishFlavorDo) Delete(models ...*model.DishFlavor) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *dishFlavorDo) withDO(do gen.Dao) *dishFlavorDo {
	d.DO = *do.(*gen.DO)
	return d
}
