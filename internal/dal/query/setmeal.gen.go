// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"reggie/internal/dal/model"
)

func newSetmeal(db *gorm.DB, opts ...gen.DOOption) setmeal {
	_setmeal := setmeal{}

	_setmeal.setmealDo.UseDB(db, opts...)
	_setmeal.setmealDo.UseModel(&model.Setmeal{})

	tableName := _setmeal.setmealDo.TableName()
	_setmeal.ALL = field.NewAsterisk(tableName)
	_setmeal.ID = field.NewInt64(tableName, "id")
	_setmeal.CategoryID = field.NewInt64(tableName, "category_id")
	_setmeal.Name = field.NewString(tableName, "name")
	_setmeal.Price = field.NewFloat64(tableName, "price")
	_setmeal.Status = field.NewInt32(tableName, "status")
	_setmeal.Description = field.NewString(tableName, "description")
	_setmeal.Image = field.NewString(tableName, "image")
	_setmeal.CreateTime = field.NewTime(tableName, "create_time")
	_setmeal.UpdateTime = field.NewTime(tableName, "update_time")
	_setmeal.CreateUser = field.NewInt64(tableName, "create_user")
	_setmeal.UpdateUser = field.NewInt64(tableName, "update_user")

	_setmeal.fillFieldMap()

	return _setmeal
}

// setmeal 套餐
type setmeal struct {
	setmealDo setmealDo

	ALL         field.Asterisk
	ID          field.Int64   // 主键
	CategoryID  field.Int64   // 菜品分类id
	Name        field.String  // 套餐名称
	Price       field.Float64 // 套餐价格
	Status      field.Int32   // 售卖状态 0:停售 1:起售
	Description field.String  // 描述信息
	Image       field.String  // 图片
	CreateTime  field.Time    // 创建时间
	UpdateTime  field.Time    // 更新时间
	CreateUser  field.Int64   // 创建人
	UpdateUser  field.Int64   // 修改人

	fieldMap map[string]field.Expr
}

func (s setmeal) Table(newTableName string) *setmeal {
	s.setmealDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s setmeal) As(alias string) *setmeal {
	s.setmealDo.DO = *(s.setmealDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *setmeal) updateTableName(table string) *setmeal {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.CategoryID = field.NewInt64(table, "category_id")
	s.Name = field.NewString(table, "name")
	s.Price = field.NewFloat64(table, "price")
	s.Status = field.NewInt32(table, "status")
	s.Description = field.NewString(table, "description")
	s.Image = field.NewString(table, "image")
	s.CreateTime = field.NewTime(table, "create_time")
	s.UpdateTime = field.NewTime(table, "update_time")
	s.CreateUser = field.NewInt64(table, "create_user")
	s.UpdateUser = field.NewInt64(table, "update_user")

	s.fillFieldMap()

	return s
}

func (s *setmeal) WithContext(ctx context.Context) *setmealDo { return s.setmealDo.WithContext(ctx) }

func (s setmeal) TableName() string { return s.setmealDo.TableName() }

func (s setmeal) Alias() string { return s.setmealDo.Alias() }

func (s setmeal) Columns(cols ...field.Expr) gen.Columns { return s.setmealDo.Columns(cols...) }

func (s *setmeal) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *setmeal) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 11)
	s.fieldMap["id"] = s.ID
	s.fieldMap["category_id"] = s.CategoryID
	s.fieldMap["name"] = s.Name
	s.fieldMap["price"] = s.Price
	s.fieldMap["status"] = s.Status
	s.fieldMap["description"] = s.Description
	s.fieldMap["image"] = s.Image
	s.fieldMap["create_time"] = s.CreateTime
	s.fieldMap["update_time"] = s.UpdateTime
	s.fieldMap["create_user"] = s.CreateUser
	s.fieldMap["update_user"] = s.UpdateUser
}

func (s setmeal) clone(db *gorm.DB) setmeal {
	s.setmealDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s setmeal) replaceDB(db *gorm.DB) setmeal {
	s.setmealDo.ReplaceDB(db)
	return s
}

type setmealDo struct{ gen.DO }

func (s setmealDo) Debug() *setmealDo {
	return s.withDO(s.DO.Debug())
}

func (s setmealDo) WithContext(ctx context.Context) *setmealDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s setmealDo) ReadDB() *setmealDo {
	return s.Clauses(dbresolver.Read)
}

func (s setmealDo) WriteDB() *setmealDo {
	return s.Clauses(dbresolver.Write)
}

func (s setmealDo) Session(config *gorm.Session) *setmealDo {
	return s.withDO(s.DO.Session(config))
}

func (s setmealDo) Clauses(conds ...clause.Expression) *setmealDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s setmealDo) Returning(value interface{}, columns ...string) *setmealDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s setmealDo) Not(conds ...gen.Condition) *setmealDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s setmealDo) Or(conds ...gen.Condition) *setmealDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s setmealDo) Select(conds ...field.Expr) *setmealDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s setmealDo) Where(conds ...gen.Condition) *setmealDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s setmealDo) Order(conds ...field.Expr) *setmealDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s setmealDo) Distinct(cols ...field.Expr) *setmealDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s setmealDo) Omit(cols ...field.Expr) *setmealDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s setmealDo) Join(table schema.Tabler, on ...field.Expr) *setmealDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s setmealDo) LeftJoin(table schema.Tabler, on ...field.Expr) *setmealDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s setmealDo) RightJoin(table schema.Tabler, on ...field.Expr) *setmealDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s setmealDo) Group(cols ...field.Expr) *setmealDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s setmealDo) Having(conds ...gen.Condition) *setmealDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s setmealDo) Limit(limit int) *setmealDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s setmealDo) Offset(offset int) *setmealDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s setmealDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *setmealDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s setmealDo) Unscoped() *setmealDo {
	return s.withDO(s.DO.Unscoped())
}

func (s setmealDo) Create(values ...*model.Setmeal) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s setmealDo) CreateInBatches(values []*model.Setmeal, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s setmealDo) Save(values ...*model.Setmeal) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s setmealDo) First() (*model.Setmeal, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Setmeal), nil
	}
}

func (s setmealDo) Take() (*model.Setmeal, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Setmeal), nil
	}
}

func (s setmealDo) Last() (*model.Setmeal, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Setmeal), nil
	}
}

func (s setmealDo) Find() ([]*model.Setmeal, error) {
	result, err := s.DO.Find()
	return result.([]*model.Setmeal), err
}

func (s setmealDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Setmeal, err error) {
	buf := make([]*model.Setmeal, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s setmealDo) FindInBatches(result *[]*model.Setmeal, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s setmealDo) Attrs(attrs ...field.AssignExpr) *setmealDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s setmealDo) Assign(attrs ...field.AssignExpr) *setmealDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s setmealDo) Joins(fields ...field.RelationField) *setmealDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s setmealDo) Preload(fields ...field.RelationField) *setmealDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s setmealDo) FirstOrInit() (*model.Setmeal, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Setmeal), nil
	}
}

func (s setmealDo) FirstOrCreate() (*model.Setmeal, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Setmeal), nil
	}
}

func (s setmealDo) FindByPage(offset int, limit int) (result []*model.Setmeal, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s setmealDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s setmealDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s setmealDo) Delete(models ...*model.Setmeal) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *setmealDo) withDO(do gen.Dao) *setmealDo {
	s.DO = *do.(*gen.DO)
	return s
}
