// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"reggie/internal/dal/model"
)

func newShoppingCart(db *gorm.DB, opts ...gen.DOOption) shoppingCart {
	_shoppingCart := shoppingCart{}

	_shoppingCart.shoppingCartDo.UseDB(db, opts...)
	_shoppingCart.shoppingCartDo.UseModel(&model.ShoppingCart{})

	tableName := _shoppingCart.shoppingCartDo.TableName()
	_shoppingCart.ALL = field.NewAsterisk(tableName)
	_shoppingCart.ID = field.NewInt64(tableName, "id")
	_shoppingCart.Name = field.NewString(tableName, "name")
	_shoppingCart.Image = field.NewString(tableName, "image")
	_shoppingCart.UserID = field.NewInt64(tableName, "user_id")
	_shoppingCart.DishID = field.NewInt64(tableName, "dish_id")
	_shoppingCart.SetmealID = field.NewInt64(tableName, "setmeal_id")
	_shoppingCart.DishFlavor = field.NewString(tableName, "dish_flavor")
	_shoppingCart.Number = field.NewInt32(tableName, "number")
	_shoppingCart.Amount = field.NewFloat64(tableName, "amount")
	_shoppingCart.CreateTime = field.NewTime(tableName, "create_time")

	_shoppingCart.fillFieldMap()

	return _shoppingCart
}

// shoppingCart 购物车
type shoppingCart struct {
	shoppingCartDo shoppingCartDo

	ALL        field.Asterisk
	ID         field.Int64   // 主键
	Name       field.String  // 商品名称
	Image      field.String  // 图片
	UserID     field.Int64   // 主键
	DishID     field.Int64   // 菜品id
	SetmealID  field.Int64   // 套餐id
	DishFlavor field.String  // 口味
	Number     field.Int32   // 数量
	Amount     field.Float64 // 金额
	CreateTime field.Time    // 创建时间

	fieldMap map[string]field.Expr
}

func (s shoppingCart) Table(newTableName string) *shoppingCart {
	s.shoppingCartDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s shoppingCart) As(alias string) *shoppingCart {
	s.shoppingCartDo.DO = *(s.shoppingCartDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *shoppingCart) updateTableName(table string) *shoppingCart {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.Name = field.NewString(table, "name")
	s.Image = field.NewString(table, "image")
	s.UserID = field.NewInt64(table, "user_id")
	s.DishID = field.NewInt64(table, "dish_id")
	s.SetmealID = field.NewInt64(table, "setmeal_id")
	s.DishFlavor = field.NewString(table, "dish_flavor")
	s.Number = field.NewInt32(table, "number")
	s.Amount = field.NewFloat64(table, "amount")
	s.CreateTime = field.NewTime(table, "create_time")

	s.fillFieldMap()

	return s
}

func (s *shoppingCart) WithContext(ctx context.Context) *shoppingCartDo {
	return s.shoppingCartDo.WithContext(ctx)
}

func (s shoppingCart) TableName() string { return s.shoppingCartDo.TableName() }

func (s shoppingCart) Alias() string { return s.shoppingCartDo.Alias() }

func (s shoppingCart) Columns(cols ...field.Expr) gen.Columns {
	return s.shoppingCartDo.Columns(cols...)
}

func (s *shoppingCart) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *shoppingCart) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 10)
	s.fieldMap["id"] = s.ID
	s.fieldMap["name"] = s.Name
	s.fieldMap["image"] = s.Image
	s.fieldMap["user_id"] = s.UserID
	s.fieldMap["dish_id"] = s.DishID
	s.fieldMap["setmeal_id"] = s.SetmealID
	s.fieldMap["dish_flavor"] = s.DishFlavor
	s.fieldMap["number"] = s.Number
	s.fieldMap["amount"] = s.Amount
	s.fieldMap["create_time"] = s.CreateTime
}

func (s shoppingCart) clone(db *gorm.DB) shoppingCart {
	s.shoppingCartDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s shoppingCart) replaceDB(db *gorm.DB) shoppingCart {
	s.shoppingCartDo.ReplaceDB(db)
	return s
}

type shoppingCartDo struct{ gen.DO }

func (s shoppingCartDo) Debug() *shoppingCartDo {
	return s.withDO(s.DO.Debug())
}

func (s shoppingCartDo) WithContext(ctx context.Context) *shoppingCartDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s shoppingCartDo) ReadDB() *shoppingCartDo {
	return s.Clauses(dbresolver.Read)
}

func (s shoppingCartDo) WriteDB() *shoppingCartDo {
	return s.Clauses(dbresolver.Write)
}

func (s shoppingCartDo) Session(config *gorm.Session) *shoppingCartDo {
	return s.withDO(s.DO.Session(config))
}

func (s shoppingCartDo) Clauses(conds ...clause.Expression) *shoppingCartDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s shoppingCartDo) Returning(value interface{}, columns ...string) *shoppingCartDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s shoppingCartDo) Not(conds ...gen.Condition) *shoppingCartDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s shoppingCartDo) Or(conds ...gen.Condition) *shoppingCartDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s shoppingCartDo) Select(conds ...field.Expr) *shoppingCartDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s shoppingCartDo) Where(conds ...gen.Condition) *shoppingCartDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s shoppingCartDo) Order(conds ...field.Expr) *shoppingCartDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s shoppingCartDo) Distinct(cols ...field.Expr) *shoppingCartDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s shoppingCartDo) Omit(cols ...field.Expr) *shoppingCartDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s shoppingCartDo) Join(table schema.Tabler, on ...field.Expr) *shoppingCartDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s shoppingCartDo) LeftJoin(table schema.Tabler, on ...field.Expr) *shoppingCartDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s shoppingCartDo) RightJoin(table schema.Tabler, on ...field.Expr) *shoppingCartDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s shoppingCartDo) Group(cols ...field.Expr) *shoppingCartDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s shoppingCartDo) Having(conds ...gen.Condition) *shoppingCartDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s shoppingCartDo) Limit(limit int) *shoppingCartDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s shoppingCartDo) Offset(offset int) *shoppingCartDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s shoppingCartDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *shoppingCartDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s shoppingCartDo) Unscoped() *shoppingCartDo {
	return s.withDO(s.DO.Unscoped())
}

func (s shoppingCartDo) Create(values ...*model.ShoppingCart) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s shoppingCartDo) CreateInBatches(values []*model.ShoppingCart, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s shoppingCartDo) Save(values ...*model.ShoppingCart) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s shoppingCartDo) First() (*model.ShoppingCart, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ShoppingCart), nil
	}
}

func (s shoppingCartDo) Take() (*model.ShoppingCart, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ShoppingCart), nil
	}
}

func (s shoppingCartDo) Last() (*model.ShoppingCart, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ShoppingCart), nil
	}
}

func (s shoppingCartDo) Find() ([]*model.ShoppingCart, error) {
	result, err := s.DO.Find()
	return result.([]*model.ShoppingCart), err
}

func (s shoppingCartDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ShoppingCart, err error) {
	buf := make([]*model.ShoppingCart, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s shoppingCartDo) FindInBatches(result *[]*model.ShoppingCart, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s shoppingCartDo) Attrs(attrs ...field.AssignExpr) *shoppingCartDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s shoppingCartDo) Assign(attrs ...field.AssignExpr) *shoppingCartDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s shoppingCartDo) Joins(fields ...field.RelationField) *shoppingCartDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s shoppingCartDo) Preload(fields ...field.RelationField) *shoppingCartDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s shoppingCartDo) FirstOrInit() (*model.ShoppingCart, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ShoppingCart), nil
	}
}

func (s shoppingCartDo) FirstOrCreate() (*model.ShoppingCart, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ShoppingCart), nil
	}
}

func (s shoppingCartDo) FindByPage(offset int, limit int) (result []*model.ShoppingCart, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s shoppingCartDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s shoppingCartDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s shoppingCartDo) Delete(models ...*model.ShoppingCart) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *shoppingCartDo) withDO(do gen.Dao) *shoppingCartDo {
	s.DO = *do.(*gen.DO)
	return s
}
